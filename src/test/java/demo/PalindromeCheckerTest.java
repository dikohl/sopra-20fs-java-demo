/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import org.junit.Before;
import org.junit.Test;

import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class PalindromeCheckerTest {

    private PalindromeChecker classUnderTest;
    private StringUtil stringUtilMock;

    @Before
    public void setUp() {
        // Create an empty hull of a class, we can control the behaviour of every method
        stringUtilMock = mock(StringUtil.class);
        classUnderTest = new PalindromeChecker(stringUtilMock);
    }

    @Test
    public void testCheckPalindrome_Word() {
        //Setup, what needs to be available to run the method
        String word = "ANNA";
        String reverse = "ANNA";

        //Mocking, how should the mocked class(es) behave
        given(stringUtilMock.reverseString(word)).willReturn(reverse);
        given(stringUtilMock.equalStrings(word, reverse)).willReturn(true);

        //Call, actually call the method to be tested
        boolean isPalindrome = classUnderTest.checkPalindrome(word);

        //Assert, check if the result is as expected
        assertTrue(isPalindrome);
    }

    @Test
    public void testCheckPalindrome_Sentence() {
        //Setup, what needs to be available to run the method
        String word = "This doesn't matter";
        String reverse = "This neither";

        //Mocking, how should the mocked class(es) behave
        given(stringUtilMock.reverseString(word)).willReturn(reverse);
        given(stringUtilMock.equalStrings(word, reverse)).willReturn(true);

        //Call, actually call the method to be tested
        boolean isPalindrome = classUnderTest.checkPalindrome(word);

        //Assert, check if the result is as expected
        assertTrue(isPalindrome);
    }

    @Test
    public void testCheckPalindrome_False() {
        //Setup, what needs to be available to run the method
        String word = "This doesn't matter";
        String reverse = "This neither";

        //Mocking, how should the mocked class(es) behave
        given(stringUtilMock.reverseString(word)).willReturn(reverse);
        given(stringUtilMock.equalStrings(word, reverse)).willReturn(false);

        //Call, actually call the method to be tested
        boolean isPalindrome = classUnderTest.checkPalindrome(word);

        //Assert, check if the result is as expected
        assertFalse(isPalindrome);
    }

    @Test
    public void testCheckPalindrome_Empty() {
        //Setup, what needs to be available to run the method
        String word = "";
        String reverse = "";

        //Mocking, how should the mocked class(es) behave
        given(stringUtilMock.reverseString(word)).willReturn(reverse);
        given(stringUtilMock.equalStrings(word, reverse)).willReturn(false);

        //Call, actually call the method to be tested
        boolean isPalindrome = classUnderTest.checkPalindrome(word);

        //Assert, check if the result is as expected
        assertFalse(isPalindrome);
    }


}
